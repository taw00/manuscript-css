/* CSS for Manuscript Formating v3.0
 *
 * m-init-page.css sets default beginning manuscript-relevant values for html,
 * body, div#vpage, and article#manuscript
 *
 * Copyright (c) Todd Warner <t0dd@protonmail.com>
 * This work is licensed under Attribution 4.0 International. To view a copy
 * of this license, visit http://creativecommons.org/licenses/by/4.0/
 */

/* baseline font-size: 1rem defined */
html { font-size: var(--m-font-size); }

@media screen {
    /* rendered view: "desktop" background that the manuscript page sits on */
    /*html, body { background-color: rgb(204 204 204); }*/ /* off-white */
    html { background-color: rgb(0 0 0 / 0%); }
    body { background-color: var(--m-desktop-color); }
} /* end @media screen */


/* we are not explicit here, but call #manuscript within your markdown or
 * HTML as <article id="manuscript" ...> */
#manuscript {
    color: black;
    background-color: rgb(0 0 0 / 0%);
    font-size:   1rem;
    font-weight: var(--m-font-weight);
    font-family: var(--m-font-family);
    line-height: var(--m-line-spacing);
    /* -- future feature (still in a w3c draft)
    hyphenate-limit-chars: 6 3 2;
    hyphenate-limit-lines: 2;
    */
}
#manuscript * {
    opacity: 1;
}
#manuscript *:not(hr,ol,ul,dl,menu,li,dt,dd) {
    margin: 0; padding: 0; border: 0;
}
#manuscript :is(p,pre) {
    word-break: normal; overflow-wrap: break-word;
}
#manuscript hr {
    /* because hr color is resistent to change (a mystery for now) */
    color: black;
    border-color: black;
    border-top: 0;  border-bottom-width: 1px;
    border-left: 0; border-right: 0;
    width: 80%;
}
#manuscript a, a:is(:any-link,:link,:active,:visited,:hover) {
    color: var(--m-link-color);
    text-decoration: none;
}
#manuscript a:hover { border-bottom: solid var(--m-link-color) 2px; }

/* rendering to the screen
 * HTML is trans and BODY is off-white.
 * We then add a pretty 3D virtual white page with #vpage and configure the
 * content container to hold the text within.
 * Implemenation note: #vpage and #manuscript use a combination of position
 * box-sizing and overflow that cannot change or the layout gets weird (though
 * overflow could still be set to auto, theoretically. */
@media screen {
    /* rendered view: "desktop" background that the manuscript page sits on */
    /*html, body { background-color: rgb(204 204 204); }*/ /* off-white */
    html { background-color: rgb(0 0 0 / 0%); }
    body { background-color: var(--m-desktop-color); }
    /* the content container */
    /* a virtual page */
    #vpage {
        display: block;
        position: relative;
        box-sizing: border-box; overflow: hidden;
        top: 0; left: 0;
        width: 100%; max-width: var(--m-page-width);
        background-color: var(--m-paper-color);
        &:not(:is(.plain,.veryplain)) {
            margin: 20px auto;
            box-shadow: 0 0 20px black;
        }
        &.plain {
            margin: 20px auto;
            /*box-shadow: 0 0 20px black;*/
            /*border: 1px solid darkgray;*/
        }
        &.veryplain {
            /*position: relative;*/ 
            /*margin: 20px auto;*/
            /*box-shadow: 0 0 20px black;*/
            /*border: 1px solid darkgray;*/
        }
    }
    #manuscript {
        display: block;
        position: relative; box-sizing: border-box; overflow: hidden;
        /* the 95% keeps a small margin on small screens */
        width: 95%; max-width: var(--m-content-width);
        margin: var(--m-page-margins) auto;
        border: var(--m-manuscript-border);
    }
} /* /screen */

/*
 * fonts and line spacing for all the sections and divs
 */
#manuscript #m-contact {
    font-size:   var(--m-font-size-contact);
    font-weight: var(--m-font-weight-contact);
    font-family: var(--m-font-family-contact);
    line-height: var(--m-line-spacing-contact);
}
#manuscript .m-header {
    font-size:   var(--m-font-size-header);
    font-weight: var(--m-font-weight-header);
    font-family: var(--m-font-family-header);
    line-height: var(--m-line-spacing);
}
#manuscript section:is(.m-part, .m-chapter) > .m-header {
    font-size:   var(--m-font-size-headers);
    font-weight: var(--m-font-weight-headers);
    font-family: var(--m-font-family-headers);
}
#manuscript > .m-facts,
#manuscript :not(section) .m-facts {
    font-size:   var(--m-font-size-facts);
    font-weight: var(--m-font-weight-facts);
    font-family: var(--m-font-family-facts);
    line-height: var(--m-line-spacing-facts);
}
#manuscript section:is(.m-chapter,.m-scene) .m-facts {
    font-size:   inherit;
    font-weight: inherit;
    font-family: inherit;
    line-height: inherit;
}

/* blockquote, pre, code
 * These are often specifically styled by markdown editors to something other
 * than the browser default. So we have to be a bit more "explicit" when we
 * style them for our purposes. (See also m-style-reset.css)
 * Note. <pre> and <code> will be monospaced (by default). Finally, <pre>
 * wraps, <code> does not, and you will have scrollbars in the HTML view. But
 * not in the generated PDF (print view).
 */
#manuscript blockquote {
    border: 0;
    margin: var(--m-elbow-room) var(--m-margins-blockquote);
    /* so many markdown tools manipulate these. overriding */
    padding: 0; background-color: inherit;
}
#manuscript :is(pre) {
    white-space: pre-wrap; /* we wrap pre but not code */
    font-size:   var(--m-font-size-preformatted);
    font-weight: var(--m-font-weight-preformatted);
    font-family: var(--m-font-family-preformatted);
    line-height: var(--m-line-spacing-preformatted);
    margin: var(--m-elbow-room) var(--m-margins-preformatted);
    /* so many markdown tools manipulate these. overriding */
    color: inherit; background-color: inherit;
}
#manuscript pre > code {
    white-space: pre; /* we wrap pre but not code */
    overflow-x: auto; /* allow scroll bars */
    font-size:   var(--m-font-size-code);
    font-weight: var(--m-font-weight-code);
    font-family: var(--m-font-family-code);
    line-height: var(--m-line-spacing-code);
    /* so many markdown tools manipulate these. overriding */
    color: inherit; background-color: inherit;
}

/* PRINT rendering - do not allow code scrollbars */
@media print {
#manuscript pre > code { overflow: hidden; }
}

/* HTML rendering - allow code scrollbars */
#manuscript :not(pre) > code {
    font-size:   var(--m-font-size-code-inline);
    font-weight: var(--m-font-weight-code-inline);
    font-family: var(--m-font-family-code);
    white-space: inherit;
    /* so many markdown tools manipulate these. overriding */
    color: inherit; background-color: inherit;
}

/* Joplin only.
 *
 * It wraps all PREs with div.joplin-editable, so we have to
 * adjust margination for that. Markdown tools can be . . . meddlesome.
 * I am not completely confident that I have all the margin-spacing correctly
 * configured for all permutations of pre.
 * Note: we have to do all of this hoop-jumping because you can't
 * :last-of-type a css class.
 */
#manuscript div.joplin-editable { margin: 0; }
#manuscript div.joplin-editable:has(+ div.joplin-editable) pre {
    margin: var(--m-elbow-room) var(--m-margins-preformatted);
}
#manuscript div.joplin-editable:not(:has + div.joplin-editable) pre {
    margin: var(--m-elbow-room) var(--m-margins-preformatted) 0;
}
#manuscript * > div.joplin-editable pre,
#manuscript *:not(div.joplin-editable) + div.joplin-editable pre {
    margin-top: 0;
}


/* In Joplin, a pre is rendered twice, depending on things I don't understand.
 * We need to blip out the extra pre. Note that this is duplicated in
 * m-style-reset-joplin, but I wanted to have it here as well in order to have
 * this well understood and in control.
 */
#rendered-md pre.joplin-source {
    display: none;
}

